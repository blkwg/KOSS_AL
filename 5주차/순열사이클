import sys
sys.setrecursionlimit(10**9)
#RECURSIONERROR 방지
CaseNo = int(sys.stdin.readline())
#케이스의 개수 T를 받아옴.

def make_cycle(permutation_list, cycle_list, i, visited):
#make_cycle에서 사이클을 만들게 된다.
    x = permutation_list[i]
    if visited[i] == 0:
    #i번째 원소가 사이클에 들어간 적이 없는 경우
        if i in cycle_list[-1]:
        #i라는 원소가 cycle에 들어있는 마지막 사이클에 들어있는 경우-i와 i번째 원소는 동일 사이클
            cycle_list[-1].append(x)
            #마지막 사이클에 추가한다
            visited[i] = 1
            #사이클에 i번째 원소가 들어갔음을 표시한다.
            make_cycle(permutation_list, cycle_list, x, visited)
            #i번째 원소가 i로써 작동하게끔 재귀함수를 사용한다.
        else:
        #i라는 원소가 마지막 사이클에 들어있지 않은 경우-동일 사이클이 아닌 경우->visited로 인해 맨 마지막 사이클만 살펴보면 중복을 피할 수 있다.
            cycle_list.append([])
            #새로운 cycle을 마지막에 append하고, x를 추가한다.
            cycle_list[-1].append(x)
            visited[i] = 1
            #원소가 사이클에 들어갔음을 표시
            make_cycle(permutation_list, cycle_list, x, visited)
            #i번째 원소가 i로써 작동하게끔 만든다.
    else:
    #i번째 원소가 사이클에 들어간 적이 있는  경우
        pass
        #원소 입력을 중단한다.


def permutation_cycle():
#복수의 순열 사이클을 받기 위한 장치지만, 사실 for문으로 해도 될 뻔했다.
    line_length = int(sys.stdin.readline())
    #순열의 크기 N을 받아온다
    cycle = [[1]]
    #반드시 한 사이클에는 포함되는 1을 미리 포함시켜 사이클에 중복으로 들어가는 일이 발생하지 않도록 했다
    visited = [0] * (line_length+1)
    #+1을 하여 인덱스를 곧바로 i로 사용할 수 있다.

    permutation = list(map(int, sys.stdin.readline().split()))
    #순열을 리스트 형태로 받아옴
    permutation.insert(0, 0)
    #visited에서 +1을 한 것 때문에 permutation에도 의미없는 원소를 0번째 자리에 추가함
    for i in range(1, line_length+1):
    #모든 원소를 돌게 함으로써 빠짐없이 사이클을 셀 수 있다
        make_cycle(permutation ,cycle, i, visited)
    print(len(cycle))
    #개수가 곧 답


for i in range(CaseNo):
#케이스의 개수만큼 
    permutation_cycle()
